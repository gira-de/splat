name: Build & Push Image
description: Extracts version, sanitizes branch, builds & pushes Docker tags

inputs:
  docker_username:
    description: "Username for your Docker registry"
    required: true
  docker_password:
    description: "Password or access token for your Docker registry"
    required: true
  image_name:
    description: "Base name of the Docker image (including registry)"
    required: true

outputs:
  image_latest:
    description: "Image with 'latest' tag"
    value: ${{ steps.set_outputs.outputs.image_latest }}
  image_major:
    description: "Image with major version tag"
    value: ${{ steps.set_outputs.outputs.image_major }}
  image_version:
    description: "Image with full semver tag"
    value: ${{ steps.set_outputs.outputs.image_version }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - run: pip install --upgrade poetry
      shell: bash

    - name: Extract version
      id: extract
      run: |
        echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT
        echo "MAJOR_VERSION=$(poetry version -s | cut -d. -f1)" >> $GITHUB_OUTPUT
      shell: bash

    - uses: rlespinasse/github-slug-action@v5
    - name: Set Docker prefix
      run: |
        if [ -n "$GITHUB_HEAD_REF_SLUG" ]; then
          BASE="$GITHUB_HEAD_REF_SLUG"
        else
          BASE="$GITHUB_REF_NAME_SLUG"
        fi
        if [ "$BASE" = "main" ]; then
          echo "PREFIX=" >> $GITHUB_ENV
        else
          echo "PREFIX=${BASE}_" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Build & push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: |
          ${{ inputs.image_name }}:${{ env.PREFIX }}latest
          ${{ inputs.image_name }}:${{ env.PREFIX }}${{ steps.extract.outputs.MAJOR_VERSION }}
          ${{ inputs.image_name }}:${{ env.PREFIX }}${{ steps.extract.outputs.VERSION }}

    - name: Set output tags
      id: set_outputs
      run: |
        echo "image_latest=${{ inputs.image_name }}:${{ env.PREFIX }}latest"  >> $GITHUB_OUTPUT
        echo "image_major=${{ inputs.image_name }}:${{ env.PREFIX }}${{ steps.extract.outputs.MAJOR_VERSION }}" >> $GITHUB_OUTPUT
        echo "image_version=${{ inputs.image_name }}:${{ env.PREFIX }}${{ steps.extract.outputs.VERSION }}"       >> $GITHUB_OUTPUT
      shell: bash
