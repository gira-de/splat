import unittest
from unittest.mock import MagicMock, patch

from splat.model import MergeRequest
from splat.source_control.github.model import (
    GithubPullRequestEntry,
    HeadGithubPullRequestEntry,
    RepoHeadGithubPullRequestEntry,
)
from splat.source_control.github.pr_handler import GithubPRHandler
from tests.source_control.github.base_test import BaseGithubSourceControlTest


class TestUpdateMergeRequest(BaseGithubSourceControlTest):
    def setUp(self) -> None:
        super().setUp()
        self.existing_pr = GithubPullRequestEntry(
            title="Splat Dependency Updates",
            body="Automated pull request generated by Splat.\n\n**Updates Summary:**\nexisiting updates",
            html_url="http://github.com/pull/1",
            url="http://api.github.com/pulls/1",
            head=HeadGithubPullRequestEntry(repo=RepoHeadGithubPullRequestEntry(html_url="http://github.com/repo")),
        )
        self.new_commit_messages = ["Security: Update Package C to 3.0.0"]
        self.updated_pr = MergeRequest(
            title="Splat Dependency Updates",
            url="http://github.com/pull/1",
            project_url="http://github.com/repo",
            project_name="group/repo",
            operation="Pull Request Updated on Github",
        )

    @patch("requests.patch")
    @patch.object(GithubPRHandler, "find_matching_pr")
    def test_github_update_pull_request_with_commits_and_no_remaining_vulns(
        self, mock_find_matching_pr: MagicMock, mock_patch: MagicMock
    ) -> None:
        # Setup Mocks
        mock_find_matching_pr.return_value = self.existing_pr
        self.setup_mock_requests_patch(mock_patch)

        # Execute
        result = self.github_platform.create_or_update_merge_request(
            self.project, self.new_commit_messages, self.branch_name, []
        )

        # Verify
        mock_find_matching_pr.assert_called_once_with(self.project, "Splat Dependency Updates", 30)
        mock_patch.assert_called_once()
        self.assertEqual(result, self.updated_pr)
        self.assertTrue(
            self.mock_logger.has_logged("Pull request updated successfully for group/repo: http://github.com/pull/1")
        )

    @patch("requests.patch")
    @patch.object(GithubPRHandler, "find_matching_pr")
    def test_github_update_pull_request_with_no_commits_and_with_remaining_vulns(
        self,
        mock_find_matching_pr: MagicMock,
        mock_patch: MagicMock,
    ) -> None:
        # Setup Mocks
        mock_find_matching_pr.return_value = self.existing_pr
        self.setup_mock_requests_patch(mock_patch)

        # Execute
        result = self.github_platform.create_or_update_merge_request(
            self.project, [], self.branch_name, self.remaining_vulns
        )

        # Verify
        mock_find_matching_pr.assert_called_once_with(self.project, "Splat Dependency Updates", 30)
        mock_patch.assert_called_once()
        self.assertEqual(result, self.updated_pr)
        self.assertTrue(
            self.mock_logger.has_logged("Pull request updated successfully for group/repo: http://github.com/pull/1")
        )

    @patch("requests.patch")
    @patch.object(GithubPRHandler, "find_matching_pr")
    def test_github_update_pull_request_with_commits_and_with_remaining_vulns(
        self,
        mock_find_matching_pr: MagicMock,
        mock_patch: MagicMock,
    ) -> None:
        # Setup Mocks
        mock_find_matching_pr.return_value = self.existing_pr
        self.setup_mock_requests_patch(mock_patch)

        # Execute
        result = self.github_platform.create_or_update_merge_request(
            self.project,
            self.new_commit_messages,
            self.branch_name,
            self.remaining_vulns,
        )

        # Verify
        mock_find_matching_pr.assert_called_once_with(self.project, "Splat Dependency Updates", 30)
        mock_patch.assert_called_once()
        self.assertEqual(result, self.updated_pr)
        self.assertTrue(
            self.mock_logger.has_logged("Pull request updated successfully for group/repo: http://github.com/pull/1")
        )


if __name__ == "__main__":
    unittest.main()
