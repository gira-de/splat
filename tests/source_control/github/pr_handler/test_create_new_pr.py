from unittest.mock import MagicMock, patch

from splat.model import MergeRequest
from tests.source_control.github.base_test import BaseGithubSourceControlTest


class TestFindMatchingPr(BaseGithubSourceControlTest):
    def setUp(self) -> None:
        super().setUp()

    @patch("requests.post")
    def test_create_new_pr_successfully_creates_pr(self, mock_post: MagicMock) -> None:
        self.setup_mock_requests_post(mock_post)

        pr_title = "Splat Dependency Updates"
        pr_description = "Automated pull request generated by Splat."
        branch_name = "feature-branch"

        # Execute the method
        result = self.github_platform.pr_handler.create_new_pr(
            pr_title, pr_description, branch_name, self.project, draft=False, timeout=30
        )

        # Verify the post request
        mock_post.assert_called_once_with(
            url=f"{self.mock_api.api_base_url}/repos/{self.project.name_with_namespace}/pulls",
            headers=self.mock_api.headers,
            json={
                "title": pr_title,
                "body": pr_description,
                "head": branch_name,
                "base": self.project.default_branch,
                "draft": False,
            },
            timeout=30,
        )

        # Verify that the result is a MergeRequest object with the correct values
        self.assertIsInstance(result, MergeRequest)
        self.assertEqual(result.title, pr_title)
        self.assertEqual(result.url, "http://github.com/pull/1")
        self.assertEqual(result.project_url, "http://github.com/repo")
        self.assertEqual(result.project_name, self.project.name_with_namespace)
        self.assertEqual(result.operation, "Pull Request Created on Github")

        # Verify that the logger was called with the correct messages
        self.assertTrue(
            self.mock_logger.has_logged(
                [
                    f"DEBUG: Creating new pull request for {self.project.name_with_namespace} with title: {pr_title}",
                    f"INFO: Pull Request created successfully for {self.project.name_with_namespace}: "
                    + "http://github.com/pull/1",
                ]
            )
        )

    @patch("requests.post")
    def test_create_new_pr_raises_exception_on_failure(self, mock_post: MagicMock) -> None:
        # Setup a failed response
        mock_post_response = MagicMock(status_code=500, text="Internal Server Error")
        mock_post.return_value = mock_post_response

        pr_title = "Splat Dependency Updates"
        pr_description = "Automated pull request generated by Splat."
        branch_name = "feature-branch"

        # Execute and verify exception is raised
        with self.assertRaises(Exception) as context:
            self.github_platform.pr_handler.create_new_pr(
                pr_title, pr_description, branch_name, self.project, draft=False, timeout=30
            )

        # Verify the post request
        mock_post.assert_called_once_with(
            url=f"{self.mock_api.api_base_url}/repos/{self.project.name_with_namespace}/pulls",
            headers=self.mock_api.headers,
            json={
                "title": pr_title,
                "body": pr_description,
                "head": branch_name,
                "base": self.project.default_branch,
                "draft": False,
            },
            timeout=30,
        )

        self.assertIn("Failed to create pull request", str(context.exception))
        self.assertIn("500 - Internal Server Error", str(context.exception))
